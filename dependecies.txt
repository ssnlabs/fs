
python3 -m venv venv
source venv/Scripts/activate
python3 app.py (or)
pip install pytest
pytest --junitxml=text.xml
deactivate



#Q1 FILE MANIPULATION

chmod +x script.sh
 (executable file)

SCRIPT:
echo Welcome to File Manipulation
echo Enter a file name:
read filename
echo Creating file
echo file created successfully!
touch $filename
echo "1.View File - V"
echo "2.Update Filename - U"
echo "3.Insert Text - I"
echo "4.Search - S"
echo "5.Delete File - D"
echo "6.Exit - E"
while true;
do
echo Enter your choice : 
read choice
case "$choice" in
	"v") cat  $filename
	"u") echo new filename:
		read newfile
		mv $filename $newfile
		filename=$newfile
	"i") echo enter text:
		read text
		echo $text > $filename
	"s") echo Searching....
	"d") rm $filename


# line and word count 

echo Enter the filename
read file
c=`cat $file | wc -c`
w=`cat $file | wc -w`
l=`grep -c "." $file`
echo Number of characters in $file is $c
echo Number of words in $file is $w
echo Number of lines in $file is $l

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Q2 JENKINS

Java Intsallation in ubuntu:
sudo apt install openjdk-17-jre-headless
sudo apt install git

Install jenkins through : java -jar jenkins.war (download war file from jenkins website)
Set up ur account with administrator password
Install suggested plugins
Give Ctrl+Z and stop 
now run ---> java -jar jenkins.war --logfile=/home/USER/jenkins.log  (replace with ur USER, *to track server logs)

To transfer Jenkins server log from local to remote
scp "jenkins.log" "user@ipaddress":"remotelog.txt"

jenkins.txt (pipeline file) :



Test.java :

class Test
{
    public static void main(String []args)
    {
        System.out.println("Hello World!!");
    }
};


(LINUX COMMANDS)
hostname -I --> ip address
whoami ---> username

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Q3 SSH REMOTE-LOCAL CONNECTION


ssh-keygen -t rsa -b 2048
ssh-copy-id username@ip
ssh username@ip
--create a test.sh in remote system
ssh username@ip 'bash ~/test.sh'

To transfer file from remote to local: (write this command in a script file--> script.sh)
scp "username@ip":"filename_remote" "filename_local"
Then run the script file ---> bash script.sh

To send file from local to remote: (write this command in a script file--> script.sh)
scp "filename_local" "username@ip":"filename_remote"
Then run the script file ---> bash script.sh

to install SSH(if not present):

sudo apt install openssh-server
sudo systemctl start ssh
sudo systemctl enable ssh
sudo apt install openjdk-17-jdk

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

#Q4 DOCKER 


app.py
Dockerfile
requirements.txt
(!CHANGES!) THERE ARE TWO COMMANDS (sudo snap install docker and sudo apt install docker.io)
sudo snap install docker.io
docker build -t myapp .

###############################################################################################

If u see docker.sock error, cd ../.. (return to base directory)
cd /var
cd /run
sudo chmod 666 docker.sock
(!CHANGES!) (This can be modified to sudo chmod 666 /var/run/docker.sock)

Another way to solve permission error
sudo usermod -aG docker$USER
newgrp docker

################################################################################################

docker run -d -p 5000:5000 myapp

docker tag myapp/app accname/app:latest
docker push accname/app:latest
docker pull accname/app:latest

Incase if Docker push,pull mentioned in question
deepsh0203 is Dockerhub username, create one for u
myapp-repo name
app-image name



app.py :

from flask import Flask

app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from Flask!"

if __name__ == "__main__":
    app.run(host="0.0.0.0",port=5000)
(!CHANGES!) (You can add endpoints if u want)


CODE2 app.py (GET METHOD): 

from flask import Flask,jsonify

app = Flask(__name__)

students = [
    {"id":1,"name":"Dennis","age":20,"Major":"Computer Science"},
    {"id": 2, "name": "Harish", "age": 20, "major": "Mathematics"},
    {"id": 3, "name": "Badri", "age": 20, "major": "Machine Learning"}
]


@app.route("/")
def home():
    return "Hello World"

@app.route("/students",methods=["GET"])
def getStudents():
    return jsonify(students)

@app.route("/students/<int:studentId>",methods=["GET"])
def getStudent(studentId):
    student=None
    for i in students:
        if i["id"]==studentId:
            student=i
            break
    if student!=None:
        return jsonify(student)
    else:
        return jsonify({"error":"Student not found"}),404


if __name__=='__main__':
    app.run("0.0.0.0",5000)


Dockerfile:

# Use the official Python image
FROM python:3.9

# Set the working directory in the container
WORKDIR /app

# Copy the current directory contents into the container
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install -r requirements.txt

# Make port 5000 available to the world outside this container
EXPOSE 5000

# Define environment variable
ENV NAME=FlaskApp

# Run app.py when the container launches
CMD ["python", "app.py"]


requirements.txt:

Flask==2.3.3
Werkzeug==2.3.3
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Q5 VERSION CONTROL

mkdir GitEx
cd GitEx

git init
git config --global user.name "Name"
git config --global user.email "name@gmail.com"

touch app.py

Add print statement in app.py
code .
git add .
git commit -m "initial commit"
git switch -c branch1

Go to app.py, change the print statement

git commit -am "First commit on branch1"
git switch master

Change print stmt in app.py
git commit -am "Second commit on master"
git merge branch1

(You could see conflict error here)

Go to VSCode, choose any one option
git commit -am "Fixed Merge Conflict"
Conflict Resolved and Merged

git log --oneline
(To view commits)



